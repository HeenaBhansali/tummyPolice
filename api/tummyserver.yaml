openapi: 3.0.0
info:
  title: Tummy Police
  description: Food Delivery App
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /restaurants:
    get:
      tags:
        - restaurants
      summary: get restaurants available in a particular city eg. "Bangalore"
      operationId: restaurantsPOST
      parameters:
        - name: city
          in: query
          required: true
          content:
            application/json:
              schema:
                type: string
      responses:
        '200':
          description: returns a list of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    address:
                      type: string
                    city:
                      type: string
                    image:
                      type: string
        '405':
          description: invalid input
  /menu:
    get:
      tags:
        - menu
      summary: get the menu for a specific restaurant
      operationId: menuPOST
      parameters:
        - name: restaurantid
          in: query
          required: true
          content:
            application/json:
              schema:
                type: string
      responses:
        '200':
          description: returns a list of menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    vegetarian:
                      type: boolean
                    category:
                      description: >-
                        category of the menu item eg. bowl, sandwich, breakfast
                        etc,.
                      type: string
                    image:
                      type: string
                    ingredients:
                      description: ingredients
                      type: string
        '405':
          description: invalid input
  /cart:
    get:
      tags:
      - cart
      summary: retrieve the current cart state
      operationId: cartGET
      responses:
        '200':
          description: returns the current cart state
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - cart
      summary: store cart state in the server
      operationId: cartPOST
      parameters:
        - name: cart
          in: path
          required: true
          content:
            application/json:
              schema:
                type: object
      responses:
        '200':
          description: successfully updated cart
components:
  schemas:
    Menu:
      type: object
      properties:
        restaurantId:
          type: string
